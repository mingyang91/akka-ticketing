

akka {
  loglevel = INFO
  actor {
    provider = cluster

    serialization-bindings {
      "com.google.protobuf.Message" = proto
      "scalapb.GeneratedMessage" = proto
      "scalapb.GeneratedEnum" = proto
    }
  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    canonical.port = 0
    canonical.hostname = 0.0.0.0
  }


  coordinated-shutdown.exit-jvm = off
  cluster {
    sharding {
      number-of-shards = 1000
    }

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    shutdown-after-unsuccessful-join-seed-nodes = 30s
    roles = ["write-model"]
  }

  discovery.method = null

  extensions = ["akka.management.cluster.bootstrap.ClusterBootstrap"]

  # On initial deployment use the default akka.management.cluster.bootstrap.new-cluster-enabled=on
  # Following the initial deployment it is recommended to set akka.management.cluster.bootstrap.new-cluster-enabled=off
  # with an immediate re-deployment once the initial cluster has formed
  management.cluster.bootstrap.new-cluster-enabled=on

  serialization {
    jackson {
      serialization-features {
        WRITE_DATES_AS_TIMESTAMPS = on
        WRITE_DURATIONS_AS_TIMESTAMPS = on
      }
    }
  }


  persistence.journal {
    plugin = "akka.persistence.cassandra.journal"
    auto-start-journals = ["akka.persistence.cassandra.journal"]
  }
  persistence.snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

  persistence {
    cassandra {
      journal {
        # to create the schema
        keyspace-autocreate = true
        tables-autocreate = true
      }

      snapshot {
        # to create the schema
        keyspace-autocreate = true
        tables-autocreate = true
      }

      query {
        refresh-interval = 2s
      }

      events-by-tag {
        # for lower latency
        eventual-consistency-delay = 25ms
        flush-interval = 25ms
        pubsub-notification = on
        first-time-bucket = "20220101T00:00"
      }
    }
  }

  http {
    server {
      preview {
        enable-http2 = on
      }
    }
  }
}



//datastax-java-driver {
//  profiles {
//    akka-persistence-cassandra-profile {
//      basic.request.timeout = 10 seconds
//    }
//    akka-persistence-cassandra-snapshot-profile {
//      basic.request.timeout = 10 seconds
//    }
//  }
//
//  advanced {
//    resolve-contact-points = false
//  }
//}

datastax-java-driver {
  basic.contact-points = [ "cassandra.cn-northwest-1.amazonaws.com.cn:9142"]
  basic.request.consistency = LOCAL_QUORUM
  basic.load-balancing-policy {
    class = DefaultLoadBalancingPolicy
    local-datacenter = cn-northwest-1
  }
  profiles {
    akka-persistence-cassandra-profile {
      basic.request {
        consistency = LOCAL_QUORUM
        # the journal does not use any counters or collections
        default-idempotence = true
      }
    }
    akka-persistence-cassandra-snapshot-profile {
      basic.request {
        consistency = ONE
        # the snapshot store does not use any counters or collections
        default-idempotence = true
      }
    }
    akka-projection-cassandra-profile {
      basic.request {
        consistency = LOCAL_QUORUM
        # the offset store does not use any counters or collections
        default-idempotence = true
      }
    }
  }
  advanced {
    metadata {
      schema.enabled = false
      token-map.enabled = false
    }
    auth-provider = {
      class = software.aws.mcs.auth.SigV4AuthProvider
      aws-region = cn-northwest-1
    }
    ssl-engine-factory {
      class = DefaultSslEngineFactory
      truststore-path = "./src/main/resources/cassandra_truststore.jks"
      truststore-password = "amazon"
      hostname-validation = false
    }
  }
}